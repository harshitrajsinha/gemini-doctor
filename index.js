const express = require("express");
const bodyParser = require("body-parser");
const cors = require("cors");
require("dotenv").config();

const app = express();
let port = process.env.PORT;

// Get allowed origins from environment variable
const allowedOrigins = process.env.ALLOWED_ORIGINS
  ? process.env.ALLOWED_ORIGINS.split(",") // Split the string into an array
  : [];

// CORS configuration
const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true); // Allow the request
    } else {
      callback(new Error("Not allowed by CORS")); // Reject the request
    }
  },
  methods: ["GET", "POST", "PUT", "DELETE"],
  credentials: true, // Allow cookies and credentials if needed
};

// Apply CORS middleware
app.use(cors(corsOptions));

const apiKey = process.env.GEMINI_KEY; // Replace with your Gemini API key

app.use(bodyParser.json());

app.get("/", (req, res) => {
  res.send("Hello from the server!");
});

app.post("/diagnose", async (req, res) => {
  const symptom = req.body.symptom;

  if (!symptom) {
    return res.status(400).json({ error: "Missing symptom in request body" });
  }

  const url = `https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash-lite:generateContent?key=${apiKey}`;

  const prompt = `${symptom}

As a doctor, please analyze this case and respond in the following **strict format** using a valid JSON object inside a \`\`\`json code block:

\`\`\`json
{
  "Diagnosis": [
    "First diagnosis...",
    "Second diagnosis...",
    "Third diagnosis..."
  ],
  "Treatment": [
    "First treatment recommendation...",
    "Second treatment recommendation...",
    "Third treatment recommendation..."
  ]
}
\`\`\`

Do not include any explanation outside of the code block. Just return this exact JSON structure, formatted properly.`;

  const body = JSON.stringify({
    contents: [
      {
        parts: [
          {
            text: prompt,
          },
        ],
      },
    ],
  });

  try {
    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body,
    });

    const data = await response.json();
    const candidates = data?.candidates;

    if (candidates && candidates.length > 0) {
      const rawText = candidates[0].content?.parts?.[0]?.text;
      const jsonBlockMatch = rawText?.match(/```json\s*([\s\S]*?)\s*```/);

      if (jsonBlockMatch && jsonBlockMatch[1]) {
        const parsedJson = JSON.parse(jsonBlockMatch[1]);
        const diagnosis = parsedJson.Diagnosis || [];
        const treatment = parsedJson.Treatment || [];

        return res.json({ Diagnosis: diagnosis, Treatment: treatment });
      } else {
        return res.status(500).json({
          error: "Failed to find or parse JSON block in Gemini response.",
        });
      }
    } else {
      return res.status(500).json({ error: "No content generated by Gemini." });
    }
  } catch (error) {
    console.error("Error communicating with Gemini API:", error);
    return res.status(500).json({ error: "Internal server error." });
  }
});

if (!port) {
  port = 4000;
}

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
